{"meta":{"title":"陈龙 の 博客","subtitle":"","description":"","author":"陈龙","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"矩阵控制灯","slug":"矩阵控制灯","date":"2020-06-24T13:07:31.000Z","updated":"2020-06-24T13:10:56.747Z","comments":true,"path":"2020/06/24/矩阵控制灯/","link":"","permalink":"http://yoursite.com/2020/06/24/%E7%9F%A9%E9%98%B5%E6%8E%A7%E5%88%B6%E7%81%AF/","excerpt":"","text":"本章任务 使用网页控制板子上的任意一盏灯 相关代码修改如下： 首先，要想控制板上任意一盏灯首先要添加25个按钮俩控制板子上的灯 123456789101112131415161718192021222324252627282930&lt;h3&gt;控制单个小灯亮暗&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;led00&quot; onclick&#x3D;&quot;led00()&quot;&gt;第一行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led01&quot; onclick&#x3D;&quot;led01()&quot;&gt;第一行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led02&quot; onclick&#x3D;&quot;led02()&quot;&gt;第一行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led03&quot; onclick&#x3D;&quot;led03()&quot;&gt;第一行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led04&quot; onclick&#x3D;&quot;led04()&quot;&gt;第一行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led10&quot; onclick&#x3D;&quot;led10()&quot;&gt;第二行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led11&quot; onclick&#x3D;&quot;led11()&quot;&gt;第二行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led12&quot; onclick&#x3D;&quot;led12()&quot;&gt;第二行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led13&quot; onclick&#x3D;&quot;led13()&quot;&gt;第二行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led14&quot; onclick&#x3D;&quot;led14()&quot;&gt;第二行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led20&quot; onclick&#x3D;&quot;led20()&quot;&gt;第三行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led21&quot; onclick&#x3D;&quot;led21()&quot;&gt;第三行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led22&quot; onclick&#x3D;&quot;led22()&quot;&gt;第三行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led23&quot; onclick&#x3D;&quot;led23()&quot;&gt;第三行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led24&quot; onclick&#x3D;&quot;led24()&quot;&gt;第三行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led30&quot; onclick&#x3D;&quot;led30()&quot;&gt;第四行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led31&quot; onclick&#x3D;&quot;led31()&quot;&gt;第四行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led32&quot; onclick&#x3D;&quot;led32()&quot;&gt;第四行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led33&quot; onclick&#x3D;&quot;led33()&quot;&gt;第四行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led34&quot; onclick&#x3D;&quot;led34()&quot;&gt;第四行第五列&lt;&#x2F;button&gt; &lt;br&gt; &lt;button id&#x3D;&quot;led40&quot; onclick&#x3D;&quot;led40()&quot;&gt;第五行第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led41&quot; onclick&#x3D;&quot;led41()&quot;&gt;第五行第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led42&quot; onclick&#x3D;&quot;led42()&quot;&gt;第五行第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led43&quot; onclick&#x3D;&quot;led43()&quot;&gt;第五行第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;led44&quot; onclick&#x3D;&quot;led44()&quot;&gt;第五行第五列&lt;&#x2F;button&gt; 每个按钮控制一个小灯 Javascriptfunction led00() &#x2F;&#x2F;第一行 &#123; if(c[0]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;4); c[0]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;4)); c[0]&#x3D;0; &#125; randLED(); &#125; function led01() &#123; if(c[1]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;3); c[1]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;3)); c[1]&#x3D;0; &#125; randLED(); &#125; function led02() &#123; if(c[2]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;2); c[2]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;2)); c[2]&#x3D;0; &#125; randLED(); &#125; function led03() &#123; if(c[3]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;1); c[3]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;1)); c[3]&#x3D;0; &#125; randLED(); &#125; function led04() &#123; if(c[4]&#x3D;&#x3D;0) &#123; led[0]&#x3D;led[0]|(1&lt;&lt;0); c[4]&#x3D;1; &#125; else&#123; led[0]&#x3D;led[0]&amp;(~(1&lt;&lt;0)); c[4]&#x3D;0; &#125; randLED(); &#125; function led10() &#x2F;&#x2F;第二行 &#123; if(c[5]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;4); c[5]&#x3D;1; &#125; else&#123; led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;4)); c[5]&#x3D;0; &#125; randLED(); &#125; function led11() &#123; if(c[6]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;3); c[6]&#x3D;1; &#125; else&#123; led[1]&#x3D;led[1]&amp;(~(1&lt;&lt;3)); c[6]&#x3D;0; &#125; randLED(); &#125; function led12() &#123; if(c[7]&#x3D;&#x3D;0) &#123; led[1]&#x3D;led[1]|(1&lt;&lt;2); c[7]&#x3D;1; &#125; function led20() &#x2F;&#x2F;第三行 &#123; if(c[10]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;4); c[10]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;4)); c[10]&#x3D;0; &#125; randLED(); &#125; function led21() &#123; if(c[11]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;3); c[11]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;3)); c[11]&#x3D;0; &#125; randLED(); &#125; function led22() &#123; if(c[12]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;2); c[12]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;2)); c[12]&#x3D;0; &#125; randLED(); &#125; function led23() &#123; if(c[13]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;1); c[13]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;1)); c[13]&#x3D;0; &#125; randLED(); &#125; function led24() &#123; if(c[14]&#x3D;&#x3D;0) &#123; led[2]&#x3D;led[2]|(1&lt;&lt;0); c[14]&#x3D;1; &#125; else&#123; led[2]&#x3D;led[2]&amp;(~(1&lt;&lt;0)); c[14]&#x3D;0; &#125; randLED(); &#125; function led30() &#x2F;&#x2F;第四行 &#123; if(c[15]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;4); c[15]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;4)); c[15]&#x3D;0; &#125; randLED(); &#125; function led31() &#123; if(c[16]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;3); c[16]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;3)); c[16]&#x3D;0; &#125; randLED(); &#125; function led32() &#123; if(c[17]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;2); c[17]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;2)); c[17]&#x3D;0; &#125; randLED(); &#125; function led33() &#123; if(c[18]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;1); c[18]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;1)); c[18]&#x3D;0; &#125; randLED(); &#125; function led34() &#123; if(c[19]&#x3D;&#x3D;0) &#123; led[3]&#x3D;led[3]|(1&lt;&lt;0); c[19]&#x3D;1; &#125; else&#123; led[3]&#x3D;led[3]&amp;(~(1&lt;&lt;0)); c[19]&#x3D;0; &#125; randLED(); &#125; function led40() &#x2F;&#x2F;第五行 &#123; if(c[20]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;4); c[20]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;4)); c[20]&#x3D;0; &#125; randLED(); &#125; function led41() &#123; if(c[21]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;3); c[21]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;3)); c[21]&#x3D;0; &#125; randLED(); &#125; function led42() &#123; if(c[22]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;2); c[22]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;2)); c[22]&#x3D;0; &#125; randLED(); &#125; function led43() &#123; if(c[23]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;1); c[23]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;1)); c[23]&#x3D;0; &#125; randLED(); &#125; function led44() &#123; if(c[24]&#x3D;&#x3D;0) &#123; led[4]&#x3D;led[4]|(1&lt;&lt;0); c[24]&#x3D;1; &#125; else&#123; led[4]&#x3D;led[4]&amp;(~(1&lt;&lt;0)); c[24]&#x3D;0; &#125; randLED(); &#125; 相关现象","categories":[],"tags":[]},{"title":"一行LED","slug":"一行LED","date":"2020-06-23T13:48:17.000Z","updated":"2020-06-24T13:11:48.782Z","comments":true,"path":"2020/06/23/一行LED/","link":"","permalink":"http://yoursite.com/2020/06/23/%E4%B8%80%E8%A1%8CLED/","excerpt":"","text":"我们可以在网页上控制led的一行或者一列灯亮灭，用数组存放。 123var led &#x3D; [0, 0, 0, 0, 0];var a&#x3D;[0, 0, 0, 0, 0]; var b&#x3D;[0, 0, 0, 0, 0]; 在body中定义10个按钮，用来控制小灯 1234567891011121314&lt;h3&gt;控制小灯行的亮暗&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;h_1&quot; onclick&#x3D;&quot;h_1()&quot;&gt;第一行&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;h_2&quot; onclick&#x3D;&quot;h_2()&quot;&gt;第二行&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;h_3&quot; onclick&#x3D;&quot;h_3()&quot;&gt;第三行&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;h_4&quot; onclick&#x3D;&quot;h_4()&quot;&gt;第四行&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;h_5&quot; onclick&#x3D;&quot;h_5()&quot;&gt;第五行&lt;&#x2F;button&gt; &lt;hr&gt; &lt;h3&gt;控制小灯列的亮暗&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;L_1&quot; onclick&#x3D;&quot;L_1()&quot;&gt;第一列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;L_2&quot; onclick&#x3D;&quot;L_2()&quot;&gt;第二列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;L_3&quot; onclick&#x3D;&quot;L_3()&quot;&gt;第三列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;L_4&quot; onclick&#x3D;&quot;L_4()&quot;&gt;第四列&lt;&#x2F;button&gt; &lt;button id&#x3D;&quot;L_5&quot; onclick&#x3D;&quot;L_5()&quot;&gt;第五列&lt;&#x2F;button&gt; &lt;hr&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465function h_1() &#123; if(a[0]&#x3D;&#x3D;0) &#123; led[0]&#x3D;31; a[0]&#x3D;1; &#125; else&#123; led[0]&#x3D;0; a[0]&#x3D;0; &#125; randLED(); &#125; function h_2() &#123; if(a[1]&#x3D;&#x3D;0) &#123; led[1]&#x3D;31; a[1]&#x3D;1; &#125; else&#123; led[1]&#x3D;0; a[1]&#x3D;0; &#125; randLED(); &#125; function h_3() &#123; if(a[2]&#x3D;&#x3D;0) &#123; led[2]&#x3D;31; a[2]&#x3D;1; &#125; else&#123; led[2]&#x3D;0; a[2]&#x3D;0; &#125; randLED(); &#125; function h_4() &#123; if(a[3]&#x3D;&#x3D;0) &#123; led[3]&#x3D;31; a[3]&#x3D;1; &#125; else&#123; led[3]&#x3D;0; a[3]&#x3D;0; &#125; randLED(); &#125; function h_5() &#123; if(a[4]&#x3D;&#x3D;0) &#123; led[4]&#x3D;31; a[4]&#x3D;1; &#125; else&#123; led[4]&#x3D;0; a[4]&#x3D;0; &#125; randLED(); &#125; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859function L_1() &#123; var i&#x3D;0; if(b[0]&#x3D;&#x3D;0) &#123; for(i&#x3D;0;i&lt;&#x3D;4;i++) led[i]&#x3D;led[i]|(1&lt;&lt;4); b[0]&#x3D;1; &#125; else&#123; for(i&#x3D;0;i&lt;&#x3D;4;i++) led[i]&#x3D;led[i]&amp;(~(1&lt;&lt;4)); b[0]&#x3D;0; &#125; randLED(); &#125; function L_2() &#123; var i&#x3D;0; if(b[1]&#x3D;&#x3D;0) &#123; for(i&#x3D;0;i&lt;&#x3D;4;i++) led[i]&#x3D;led[i]|(1&lt;&lt;3); b[1]&#x3D;1; &#125; else&#123; for(i&#x3D;0;i&lt;&#x3D;4;i++) led[i]&#x3D;led[i]&amp;(~(1&lt;&lt;3)); b[1]&#x3D;0; &#125; randLED(); &#125; function L_3() &#123; var i&#x3D;0; if(b[2]&#x3D;&#x3D;0) &#123; for(i&#x3D;0;i&lt;&#x3D; b[3]&#x3D;1; &#125; else&#123; for(i&#x3D;0;i&lt;&#x3D;4;i++) led[i]&#x3D;led[i]&amp;(~(1&lt;&lt;1)); b[3]&#x3D;0; &#125; randLED(); &#125; function L_5() &#123; var i&#x3D;0; if(b[4]&#x3D;&#x3D;0) &#123; for(i&#x3D;0;i&lt;&#x3D;4;i++) led[i]&#x3D;led[i]|(1&lt;&lt;0); b[4]&#x3D;1; &#125; else&#123; for(i&#x3D;0;i&lt;&#x3D;4;i++) led[i]&#x3D;led[i]&amp;(~(1&lt;&lt;0)); b[4]&#x3D;0; &#125; randLED(); &#125; 1234567891011121314151617181920212223242526272829303132333435function randLED() &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_matrix_data &#x3D; new Uint8Array(led); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; 以上为控制BBC板的任意一行、列灯的添加的代码，连接BBC板，这时我们可以看到： 随便点击一个按钮，Microbit板子上灯便会亮一排或一列；再点击，便会熄灭，这样我们就可以控制任意一行、列灯了！","categories":[],"tags":[]},{"title":"启用通知","slug":"启用通知","date":"2020-06-23T12:47:38.000Z","updated":"2020-06-24T13:07:01.581Z","comments":true,"path":"2020/06/23/启用通知/","link":"","permalink":"http://yoursite.com/2020/06/23/%E5%90%AF%E7%94%A8%E9%80%9A%E7%9F%A5/","excerpt":"","text":"本章任务 在网页上显示加速度计得三轴值 了解 Micro:bit采用的是Freescale MMA8653FC 三轴加速度传感器，I2C接口与外部通信，10位ADC精度，可设置量程为±2g，±4g，±8g，数据最大更新速率为800Hz。 当Micro:bit处于静止或匀速运动状态时，加速计仅检测到重力加速度；将Micro:bit轻微甩动，加速计检测到甩动的加速度远小于重力加速度，可忽略不计，因此，在使用Micro:bit过程中，主要是检测当姿态变化时，重力加速度在x,y,z轴上的变化，并在此基础上应用。 相关代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051 &lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected &#x3D; false; var services_discovered &#x3D; false; &#x2F;&#x2F;在第5课上添加 var notifications_enabled &#x3D; false; &#x2F;&#x2F;在第5课上添加以下内容 var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_name_string &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; &#x2F;&#x2F; cached characteristics var led_matrix_state; var model_number_string; var accelerometer_data; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverOrdisconnectDevices() &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); if (!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function setNotificationsStatus(status) &#123; notifications_enabled &#x3D; status; document.getElementById(&#39;status_notifications&#39;).innerHTML &#x3D; status; &#125; Javascriptfunction onDisconnected() &#123; console.log(&quot;onDisconnected&quot;); resetUI(); &#125; function onAccelerometerData(event) &#123; console.log(&quot;onAccelerometerData&quot;); buffer &#x3D; event.target.value.buffer; dataview &#x3D; new DataView(buffer); X &#x3D; dataview.getUint16(0, true); Y &#x3D; dataview.getUint16(2, true); Z &#x3D; dataview.getUint16(4, true); console.log(&quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z+&quot; + Z); document.getElementById(&quot;accelerometer_data&quot;).innerHTML &#x3D; &quot;X&#x3D;&quot; + X + &quot;, Y&#x3D;&quot; + Y + &quot;, Z&#x3D;&quot; + Z; &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; navigator.bluetooth.requestDevice(options) .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name:&#39; + device.name); console.log(&#39;&gt; Id:&#39; + device.id); console.log(&#39;&gt; Connected:&#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; + error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener( &#39;gattserverdisconnected&#39;,onDisconnected); &#x2F;&#x2F; 在第4课基础上添加的函数 connected_server &#x3D; server; discoverSvcsAndChars(); &#x2F;&#x2F;&#x2F;&#x2F;在第5课基础上添加的函数 setConnectedStatus(true); &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125;, function (error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#125; ); &#125; function setConnectedStatus(status) &#x2F;&#x2F; 在第3课基础上添加的函数,设置电脑蓝牙的当前连接状态 &#123; connected &#x3D; status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if (status &#x3D;&#x3D; true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#x2F;&#x2F; 在第4课基础上添加的函数 &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#x2F;&#x2F; 在第5课基础上添加的函数 setNotificationsStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices()&#x2F;&#x2F;调用函数去获取BBC上的相应的服务 .then(services &#x3D;&gt; &#x2F;&#x2F;对服务进行判断 &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; &#x2F;&#x2F;发现BBC板服务的个数 console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#x2F;&#x2F;对已发现的所有服务进行判断 &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() &#x2F;&#x2F;获取相应服务的所有特性 .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; &#x2F;&#x2F;发现一个就加一 characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; &#x2F;&#x2F;特性的个数 characteristics.forEach(characteristic &#x3D;&gt; &#x2F;&#x2F;对已发现的特性进行判断 &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; &#x2F;&#x2F;把发现的相应特性保存到相应变量中 has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_name_string &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F;setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; function randomLEDs()&#x2F;&#x2F;第六节课添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F;state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return &#125; if (!services_discovered)&#x2F;&#x2F;有没有发现所有服务 &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return &#125; if (!has_led_matrix_state)&#x2F;&#x2F;led灯的特性有没有被发现的一个标记变量 &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; &#x2F;&#x2F;math.random():0~1 math.floor(x):返回小于等于x的最大整数 led_array[0] &#x3D; Math.floor(Math.random() * 32); led_array[1] &#x3D; 1; led_array[2] &#x3D; 2; led_array[3] &#x3D; 3; led_array[4] &#x3D; 4; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer)&#x2F;&#x2F;控制板子上灯亮灭 .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; +error); return; &#125;); &#125;function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service&quot;); return; &#125; if (!has_model_name_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic&quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125;function toggleAccelerometerNotifications() &#123; console.log(&quot;toggleAccelerometerNotifications&quot;); if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_accelerometer_service) &#123; alert(&quot;Error: The connected device does not contain the accelerometer service&quot;); return; &#125; if (!has_accelerometer_data) &#123; alert(&quot;Error: The connected device does not contain the accelerometer data characteristic&quot;); return; &#125; if (!notifications_enabled) &#123; accelerometer_data.startNotifications() .then(_ &#x3D;&gt; &#123; console.log(&#39;accelerometer notifications started&#39;); setNotificationsStatus(true); accelerometer_data.addEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; else &#123; accelerometer_data.stopNotifications() .then(_ &#x3D;&gt; &#123; console.log(&#39;accelerometer notificaions stopped&#39;); setNotificationsStatus(false); accelerometer_data.removeEventListener(&#39;characteristicvaluechanged&#39;, onAccelerometerData); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Could not stop accelerometer_data notifications: &#39; + error); &#125;); &#125;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;h2&gt; Status&lt;&#x2F;h2&gt;&lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;!--表格的第一行 --&gt; &lt;td&gt;&lt;b&gt;Connected&lt;&#x2F;b&gt;&lt;&#x2F;td&gt; &lt;td&gt;&lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt;&lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Notifications&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;!--表格的第二行 --&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt; false &lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_notifications&quot;&gt;false&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt;&lt;&#x2F;table&gt;&lt;h2&gt; Device Discovery Or Disconnect &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;&#x2F;h2 &gt;&lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverOrdisconnectDevices()&quot;&gt;Start scan&lt;&#x2F;button&gt;&lt;hr&gt;&lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt;&lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt;&lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt;&lt;h3&gt;Read Characteristic - Model Number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model Number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;hr&gt; &lt;h2&gt;Notifications - Accelerometer X, Y, Z&lt;&#x2F;h2&gt; &lt;button id&#x3D;&quot;btn_notify&quot; onclick&#x3D;&quot;toggleAccelerometerNotifications()&quot;&gt;Toggle Notifications&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;accelerometer_data&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 观察现象 图上的状态差不多是板子在水平状态下的值。","categories":[],"tags":[]},{"title":"蓝牙设备","slug":"蓝牙设备","date":"2020-06-22T13:05:58.000Z","updated":"2020-06-22T13:06:35.605Z","comments":true,"path":"2020/06/22/蓝牙设备/","link":"","permalink":"http://yoursite.com/2020/06/22/%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/","excerpt":"","text":"代码部分: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected&#x3D;false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true&#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); connected_server &#x3D; server; setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;h2&gt;Device Discovery &lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevices()&quot;&gt; Start scan &lt;&#x2F;button&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 调用谷歌浏览器的内置蓝牙功能搜索周边设备找到自己的设备名，然后在网页的JS里面调用蓝牙的库函数搜索蓝牙设备，然后在蓝牙设备列表里面找到自己的设备，点击连接表格里面的连接状态就变成TRUE.","categories":[],"tags":[]},{"title":"服务特性","slug":"服务特性","date":"2020-06-22T13:04:57.000Z","updated":"2020-06-24T13:11:58.870Z","comments":true,"path":"2020/06/22/服务特性/","link":"","permalink":"http://yoursite.com/2020/06/22/%E6%9C%8D%E5%8A%A1%E7%89%B9%E6%80%A7/","excerpt":"","text":"代码部分: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; var connected_server; var connected&#x3D;false; var services_discovered &#x3D;false; &#x2F;&#x2F;在第五节课上添加 &#x2F;&#x2F;在第5课上添加以下内容 &#x2F;&#x2F; presence of services and characteristics var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_number_string &#x3D; false; var has_temperature_service &#x3D; false; var has_temperature &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE&#x3D;&#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count ; function discoverDevicesOrDisconnect() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); console.log(&quot;光芒万丈小太阳&quot;) if(!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;onDisconnected&quot;) resetUI(); &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#x2F;&#x2F;在第二课基础上添加的函数 &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;,onDisconnected); connected_server &#x3D; server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_number_string &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; TEMPERATURE) &#123; temperature &#x3D; characteristic; has_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F; setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i&#x3D;0; function randomLEDs() &#x2F;&#x2F;第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; var led_array2 &#x3D;[[12,2,12,2,12],[4,10,2,4,14],[4,12,4,4,14],[0,10,21,10,4],[10,21,17,10,4]]; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array&#x3D;led_array2[i%5]; i++; &#x2F;*led_array[0] &#x3D; led_array2[i][1]; led_array[1] &#x3D; led_array2[i][1]; led_array[2] &#x3D; led_array2[i][2]; led_array[3] &#x3D; led_array2[i][3]; led_array[4] &#x3D; led_array2[i][4];*&#x2F; &#x2F;* led_array[0] &#x3D; 10;&#x2F;&#x2F;Math.floor(Math.random() * 32); led_array[1] &#x3D; 21; led_array[2] &#x3D; 17; led_array[3] &#x3D; 10; led_array[4] &#x3D; 4; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;&#x2F;h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevicesOrDisconnect()&quot;&gt; Discover Devices &lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt; &lt;hr&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 本次课程，要求的是增加温度服务特性，首先在sig web 上下载蓝牙温度服务程序，具体代码如上","categories":[],"tags":[]},{"title":"读写特性","slug":"读写特性","date":"2020-06-22T13:03:31.000Z","updated":"2020-06-22T13:04:42.345Z","comments":true,"path":"2020/06/22/读写特性/","link":"","permalink":"http://yoursite.com/2020/06/22/%E8%AF%BB%E5%86%99%E7%89%B9%E6%80%A7/","excerpt":"","text":"代码部分: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328&lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected &#x3D; false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 var services_discovered &#x3D; false; &#x2F;&#x2F;在第五节课上添加 &#x2F;&#x2F;在第5课上添加以下内容 &#x2F;&#x2F; presence of services and characteristics var has_accelerometer_service &#x3D; false; var has_accelerometer_data &#x3D; false; var has_led_service &#x3D; false; var has_led_matrix_state &#x3D; false; var has_device_information_service &#x3D; false; var has_model_number_string &#x3D; false; var has_temperature_service &#x3D; false; var has_temperature &#x3D; false; &#x2F;&#x2F; service UUIDs ACCELEROMETER_SERVICE &#x3D; &#39;e95d0753-251d-470a-a062-fa1922dfa9a8&#39;; LED_SERVICE &#x3D; &#39;e95dd91d-251d-470a-a062-fa1922dfa9a8&#39;; DEVICE_INFORMATION_SERVICE &#x3D; &#39;0000180a-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE_SERVICE &#x3D; &#39;e95d6100-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; characteristic UUIDs ACCELEROMETER_DATA &#x3D; &#39;e95dca4b-251d-470a-a062-fa1922dfa9a8&#39;; LED_MATRIX_STATE &#x3D; &#39;e95d7b77-251d-470a-a062-fa1922dfa9a8&#39;; MODEL_NUMBER_STRING &#x3D; &#39;00002a24-0000-1000-8000-00805f9b34fb&#39;; TEMPERATURE &#x3D; &#39;e95d9250-251d-470a-a062-fa1922dfa9a8&#39;; &#x2F;&#x2F; cached characteristics var accelerometer_data; var accelerometer_data; var led_matrix_state; var model_number_string; var temperature; &#x2F;&#x2F; var service_count; var services_discovered; var characteristics_discovered; var characteristic_count; function discoverDevicesOrDisconnect() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;discoverDevicesOrDisconnect&quot;); console.log(&quot;光芒万丈小太阳&quot;) if (!connected) discoverDevices(); else &#123; selected_device.gatt.disconnect(); &#125; &#125; function onDisconnected() &#x2F;&#x2F;在第四课基础上添加的函数 &#123; console.log(&quot;onDisconnected&quot;) resetUI(); &#125; function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123; acceptAllDevices: true, optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE, TEMPERATURE_SERVICE ] &#x2F;&#x2F;在第5节课上添加 &#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#x2F;&#x2F;在第二课基础上添加的函数 &#125;) .catch(error &#x3D;&gt; &#123; alert(&#39;ERROR:&#39; + error); console.log(&#39;ERROR:&#39; + error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function (server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); selected_device.addEventListener(&#39;gattserverdisconnected&#39;, onDisconnected); connected_server &#x3D; server; discoverSvcsAndChars(); setConnectedStatus(true); &#125;, function (error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected &#x3D; status; document.getElementById(&#39;status_connected&#39;).innerHTML &#x3D; status; if (status &#x3D;&#x3D; true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML &#x3D; &quot;Discover Devices&quot;; &#125; &#125; function setDiscoveryStatus(status) &#123; services_discovered &#x3D; status; document.getElementById(&#39;status_discovered&#39;).innerHTML &#x3D; status; &#125; function resetUI() &#123; setConnectedStatus(false); setDiscoveryStatus(false); &#125; function discoverSvcsAndChars() &#x2F;&#x2F;在第5课基础上添加的函数 &#123; console.log(&quot;discoverSvcsAndChars server&#x3D;&quot; + connected_server); connected_server.getPrimaryServices() .then(services &#x3D;&gt; &#123; has_accelerometer_service &#x3D; false; has_led_service &#x3D; false; has_device_information_service &#x3D; false; has_temperature_service &#x3D; false; services_discovered &#x3D; 0; service_count &#x3D; services.length; console.log(&quot;Got &quot; + service_count + &quot; services&quot;); services.forEach(service &#x3D;&gt; &#123; if (service.uuid &#x3D;&#x3D; ACCELEROMETER_SERVICE) &#123; has_accelerometer_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; LED_SERVICE) &#123; has_led_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; DEVICE_INFORMATION_SERVICE) &#123; has_device_information_service &#x3D; true; &#125; if (service.uuid &#x3D;&#x3D; TEMPERATURE_SERVICE) &#123; has_temperature_service &#x3D; true; &#125; console.log(&#39;Getting Characteristics for service &#39; + service.uuid); service.getCharacteristics() .then(characteristics &#x3D;&gt; &#123; console.log(&#39;&gt; Service: &#39; + service.uuid); services_discovered++; characteristics_discovered &#x3D; 0; characteristic_count &#x3D; characteristics.length; characteristics.forEach(characteristic &#x3D;&gt; &#123; characteristics_discovered++; console.log(&#39;&gt;&gt; Characteristic: &#39; + characteristic.uuid); if (characteristic.uuid &#x3D;&#x3D; ACCELEROMETER_DATA) &#123; accelerometer_data &#x3D; characteristic; has_accelerometer_data &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; LED_MATRIX_STATE) &#123; led_matrix_state &#x3D; characteristic; has_led_matrix_state &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; MODEL_NUMBER_STRING) &#123; model_number_string &#x3D; characteristic; has_model_number_string &#x3D; true; &#125; if (characteristic.uuid &#x3D;&#x3D; TEMPERATURE) &#123; temperature &#x3D; characteristic; has_temperature &#x3D; true; &#125; if (services_discovered &#x3D;&#x3D; service_count &amp;&amp; characteristics_discovered &#x3D;&#x3D; characteristic_count) &#123; console.log(&quot;FINISHED DISCOVERY&quot;); setDiscoveryStatus(true); &#x2F;&#x2F; setDiscoveryStatus(true); &#125; &#125;); &#125;); &#125;); &#125;); &#125; var i &#x3D; 0; function randomLEDs() &#x2F;&#x2F;第6课上添加 &#123; console.log(&quot;randomLEDs&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_led_service) &#123; alert(&quot;Error: The connected device does not contain the LED service&quot;); return; &#125; if (!has_led_matrix_state) &#123; alert(&quot;Error: The connected device does not contain the LED matrix state characteristic&quot;); return; &#125; var led_array &#x3D; [0, 0, 0, 0, 0]; var led_array2 &#x3D; [ [12, 2, 12, 2, 12], [4, 10, 2, 4, 14], [4, 12, 4, 4, 14], [0, 10, 21, 10, 4], [10, 21, 17, 10, 4] ]; &#x2F;&#x2F; Math.random():0~1 Math.floor(x):返回小于等于x的最大整数 led_array &#x3D; led_array2[i % 5]; i++; &#x2F;*led_array[0] &#x3D; led_array2[i][1]; led_array[1] &#x3D; led_array2[i][1]; led_array[2] &#x3D; led_array2[i][2]; led_array[3] &#x3D; led_array2[i][3]; led_array[4] &#x3D; led_array2[i][4];*&#x2F; &#x2F;* led_array[0] &#x3D; 10;&#x2F;&#x2F;Math.floor(Math.random() * 32); led_array[1] &#x3D; 21; led_array[2] &#x3D; 17; led_array[3] &#x3D; 10; led_array[4] &#x3D; 4; *&#x2F; var led_matrix_data &#x3D; new Uint8Array(led_array); led_matrix_state.writeValue(led_matrix_data.buffer) .then(_ &#x3D;&gt; &#123; console.log(&#39;LED matrix state changed&#39;); &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; function readModelNumber() &#123; console.log(&quot;readModelNumber&quot;); &#x2F;&#x2F; state validation if (!connected) &#123; alert(&quot;Error: Discover and connect to a device before using this function&quot;); return; &#125; if (!services_discovered) &#123; alert(&quot;Error: Service discovery has not yet completed&quot;); return; &#125; if (!has_device_information_service) &#123; alert(&quot;Error: The connected device does not contain the device information service &quot;); return; &#125; if (!has_model_number_string) &#123; alert(&quot;Error: The connected device does not contain the model name string characteristic &quot;); return; &#125; model_number_string.readValue() .then(value &#x3D;&gt; &#123; data &#x3D; new Uint8Array(value.buffer); model_number_string &#x3D; new TextDecoder(&quot;utf-8&quot;).decode(data); console.log(model_number_string); document.getElementById(&quot;model_number&quot;).innerHTML &#x3D; model_number_string; &#125;) .catch(error &#x3D;&gt; &#123; console.log(&#39;Error: &#39; + error); alert(&#39;Error: &#39; + error); return; &#125;); &#125; &lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;h1&gt;Web Bluetooth&lt;&#x2F;h1&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;td&gt; &lt;b&gt;Service Discovery Completed&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;td id&#x3D;&quot;status_discovered&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;hr&gt; &lt;h2&gt;Device Discovery Or Disconnect&lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevicesOrDisconnect()&quot;&gt; Discover Devices &lt;&#x2F;button&gt; &lt;hr&gt; &lt;h2&gt;Reading and Writing&lt;&#x2F;h2&gt; &lt;h3&gt;Read Characteristic - Model Number&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_read&quot; onclick&#x3D;&quot;readModelNumber()&quot;&gt;Read Model Number&lt;&#x2F;button&gt; &lt;div id&#x3D;&quot;model_number&quot;&gt;&lt;&#x2F;div&gt; &lt;h3&gt;Write Characteristic - Randomise Lights&lt;&#x2F;h3&gt; &lt;button id&#x3D;&quot;btn_write&quot; onclick&#x3D;&quot;randomLEDs()&quot;&gt;Randomise LEDs&lt;&#x2F;button&gt; &lt;hr&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 首先添加一个读写按钮，接着添加读取型号函数，再添加改变LED的写函数 当点Read MOdel Number执行读取型号函数在下方显示型号，点击Randomise LED 板子上面LED发生改变","categories":[],"tags":[]},{"title":"网页蓝牙设备连接","slug":"网页蓝牙设备连接","date":"2020-06-22T13:02:26.000Z","updated":"2020-06-22T13:03:04.193Z","comments":true,"path":"2020/06/22/网页蓝牙设备连接/","link":"","permalink":"http://yoursite.com/2020/06/22/%E7%BD%91%E9%A1%B5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5/","excerpt":"","text":"知识储备Micro:bit是由英国BBC公司(对，你没有看错，就是那个被拍纪录片耽误的科技公司BBC)推出的面向青少年编程教育的微型计算机，别看它身材不大，但麻雀虽小五脏俱全，一块小板子上集成了加速度传感器，磁力传感器，两个可编程按钮，25个单色led，蓝牙等常用传感器设备，而尺寸只有信用卡的一半大小，采用micro usb口供电，可外接电池盒，在底部还有多个环孔连接器，可用于控制外接设备。 步骤一、micro:bit在电脑上的连接 先将板子通过usb口连接到电脑 在官网上下载测试程序 下载程序完成后，将程序拖入测试板所在的盘内，此时会发现板子上出现” Hi ! “的标识，则表示成功 二、蓝牙的连接 使用Visual Studio Code软件创建新的html文件，在文件中输入以下代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;html&gt; &lt;head&gt; &lt;script&gt; var selected_device; &#x2F;&#x2F; 保存用户选择的蓝牙设备 var connected_server; &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备 var connected&#x3D;false; &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备 function discoverDevices() &#123; console.log(&quot;discoverDevices&quot;); &#x2F;&#x2F;consol.log 控制台打印输出 var options &#x3D; &#123;acceptAllDevices:true&#125; &#x2F;&#x2F;发现所有周边蓝牙设备 navigator.bluetooth.requestDevice(options) &#x2F;&#x2F;Navigator对象，包含有关游览器的信息 .then(device &#x3D;&gt; &#123; console.log(&#39;&gt; Name: &#39; + device.name); console.log(&#39;&gt; Id: &#39; + device.id); console.log(&#39;&gt; Connected: &#39; + device.gatt.connected); selected_device &#x3D; device; console.log(selected_device); connect(); &#125;) .catch(error &#x3D;&gt;&#123; alert(&#39;ERROR:&#39; +error); console.log(&#39;ERROR:&#39; +error); &#125;); &#125; function connect() &#123; console.log(&quot;connecting&quot;); selected_device.gatt.connect() .then( function(server) &#x2F;&#x2F;表示连接成功 &#123; console.log(&quot;Connected to&quot; + server.device.id); console.log(&quot;Connected&#x3D;&quot; + server.connected); connected_server &#x3D; server; setConnectedStatus(true); &#125;, function(error) &#x2F;&#x2F;表示连接失败 &#123; console.log(&quot;ERROR:could not connct-&quot; + error); alert(&quot;ERROR:could not connct-&quot; + error); setConnectedStatus(false); &#125; ); &#125; function setConnectedStatus(status) &#123; connected&#x3D;status; document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status; if(status&#x3D;&#x3D;true) &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;; &#125; else &#123; document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;; &#125; &#125; &lt;&#x2F;script&gt; &lt;&#x2F;head&gt; &lt;body&gt; &lt;h2&gt; Status &lt;!-- 显示蓝牙状态--&gt; &lt;&#x2F;h2&gt; &lt;table border&#x3D;&quot;1&quot;&gt; &lt;tr&gt; &lt;td&gt; &lt;b&gt;Connected&lt;&#x2F;b&gt; &lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;h2&gt;Device Discovery &lt;&#x2F;h2&gt; &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt; &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevices()&quot;&gt; Start scan &lt;&#x2F;button&gt; &lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 保存成功之后，使用Google Chrome打开文件，出现以下界面 点击Start scan按钮，找到自己的设备点击连接配对 配对成功，连接成功后，Connected为true，板子显示从D变为C。 到此就结束了项目二的第一项功能。","categories":[],"tags":[]},{"title":"从零开始搭建Hexo","slug":"从零开始搭建Hexo","date":"2020-05-26T08:10:51.000Z","updated":"2020-05-30T13:59:27.629Z","comments":true,"path":"2020/05/26/从零开始搭建Hexo/","link":"","permalink":"http://yoursite.com/2020/05/26/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAHexo/","excerpt":"","text":"前言虽说是网站，对于个人来说，或许一般叫作博客。但我不希望它仅仅是一个博客，而是能够成为一个处于自己现实生活之外、自由、实验、不用畏惧他人眼光甚至可以独断专行的地方。我会从整体上对搭建网站的流程和使用到的技术及步骤进行介绍我希望看完此篇文章后，此前对此方面知识一无所知的小白，到最后也能搭建出一个属于自己的站点。（前提是认识基础的英语单词和善用搜索引擎） 接下来就是我安装hexo博客的过程 一. 下载和安装Node.js和Git 二. 安装 Hexo 三. 创建 Hexo 步骤1.安装Node.js 什么是 Node.js ？ 这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。 Node.js | 百度百科 JavaScript | MDN 下载｜ Node.js 建议下载长期支持版而非当前发布版（因为如果是最新版，容易出现一些奇妙的 bug）。 全部默认下一步进行安装。 Windows 打开命令提示符，后续如提到输入命令，均默认指打开终端进行输入。 输入 node --version，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。 2.安装Git Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。（当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 Git LFS。） 下载 Git 并安装（如果国内速度太慢，可以试试这里） 类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。 Git也是全部默认下一步进行安装。 在cmd窗口输入git 若若结果列出Git的各种用法，则表示Git安装成功。 三.安装hexoHexo GitHub: http://github.com/hexojs/hexo 官方文档（直接参考文档也是一个不错的选择） 所有必备的应用程序安装完成后，即可使用 npm 或者git来安装 Hexo。(建议使用git来安装,这样会比较方便。) 在安装之前我建议你先创个blog文件，就是存放的你的hexo，然后在在文件夹中空白处鼠标右键打开git bash here。 在终端中输入以下命令： 123npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。install 自然是安装。hexo-cli 则是 hexo 的终端工具，可以帮助你生成一些模版文件，之后再用到。-g 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。 输入hexo -v，检查hexo是否安装成功 ，如下 这样hexo就已经安装成功了。不过还要创建hexo。 四.创建hexo这样准备工作就完成了，接下来就开始正式创建hexo。 在你刚才创建的文件夹还是在文件夹空白处点击Git，然后输入hexo init，初始化你的文件夹。 如果你看到后面的“Start blogging with Hexo！”，就说明文件夹初始化完成。 最后第二步就是输入npm install，安装所需要的组件。 四.设置SSH keys1、在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。ls -al ~/.ssh 2、如果不存在就没有关系，如果存在的话，直接删除.ssh文件夹里面所有文件： 3、生成密钥：(与接下来的3二选一即可) git config –global user.email “1914324673@qq.com” # 填写你github注册并且验证的邮箱 git config –global user.name “jasmine-na” # github 用户名 ssh-keygen # 会出现下面的内容，一直按Enter键就行 Generating public/private rsa key pair.Enter file in which to save the key (/home/logan/.ssh/id_rsa):/home/logan/.ssh/id_rsa already exists.Overwrite (y/n)? #因为我已经生成过了所以提示我，你就一直按就行 最后在你的.ssh 目录下面生成 id_rsa(私钥) id_rsa.pub(公钥)俩个文件 第二行会提示你在哪个目录下面生成文件。 3、生成密钥另外一种方法：输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车： ssh-keygen -t rsa -C “1914324673@qq.com” 然后它会提示要你输入passphrase，直接回车： 然后键入以下指令： ssh-agent -s 继续输入指令： ssh-add ~/.ssh/id_rsa 输入之后，出错： 出错，则输入： eval ssh-agent -sssh-add 4、打开.ssh/id_rsa.pub，全选复制Key 5、到Github 6、测试： ssh -T git@github.com 遇到警告输入“yes”，最后输出 You’ve successfully authenticated 表示添加key 成功。 编辑_config.yml文件 修改文件里面的deploy， 修改后 1234deploy: type: git repo: git@gitee.com:chengfu9408&#x2F;myblog.git branch: master 完成部署1、 依次键入指令： hexo clean hexo generate hexo deploy 2、在浏览器输入：https://chengfu9408.gitee.io/myblog","categories":[],"tags":[]},{"title":"Markdown 语法","slug":"Markdown-语法","date":"2020-05-26T08:09:33.000Z","updated":"2020-05-26T08:10:07.653Z","comments":true,"path":"2020/05/26/Markdown-语法/","link":"","permalink":"http://yoursite.com/2020/05/26/Markdown-%E8%AF%AD%E6%B3%95/","excerpt":"","text":"标题一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。注:标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 示例: 一级标题二级标题三级标题四级标题五级标题六级标题斜体斜体要倾斜的文字左右分别用一个*号包起来 斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来 删除线要加删除线的文字左右分别用两个~~号包起来 示例: 这是加粗的文字 这是倾斜的文字` 这是斜体加粗的文字\\ 这是加删除线的文字 列表无序列表使用-、+和*作为列表标记： Red Green Blue Red Green Blue Red Green Blue有序列表则使用数字加英文句点.来表示： Red Green Blue 引用引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。 这是一段引用 //在&gt;后面有 1 个空格 1这是引用的代码块形式 &#x2F;&#x2F;在&#96;&gt;&#96;后面有 5 个空格 代码例子： 1234protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 一级引用 二级引用 三级引用 这是一个四级标题 这是第一行列表项 这是第二行列表项 强调两个或-代表加粗，一个或-代表斜体，~~代表删除。加粗文本 或者 加粗文本 斜体文本 或者斜体文本 删除文本 图片与链接图片与链接的语法很像，区别在一个 ! 号。二者格式：图片：) 链接： 链接文本链接又分为行内式、参考式和 自动链接：这是行内式链接：ConnorLin’s Blog。 这是参考式链接：ConnorLin’s Blog，其中url为链接标记，可置于文中任意位置。 链接标记格式为：[链接标记文本]: 链接地址 链接title(可忽略) 这是自动链接：直接使用&lt;&gt;括起来http://connorlin.github.io 这是图片： 代码代码分为行内代码和代码块。 行内代码使用 代码 标识，可嵌入文字中 代码块使用4个空格或```标识 1这里是代码 代码语法高亮在 ```后面加上空格和语言名称即可 12&#x2F;&#x2F;注意语言前面有空格这里是代码 例如：这是行内代码onCreate(Bundle savedInstanceState)的例子。 这是代码块和语法高亮： 12345// 注意java前面有空格protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 表格表格对齐格式 居左：:—-居中：:—-:或—–居右：—-:|标题|标题|标题||:—|:—:|—:||居左测试文本|居中测试文本|居右测试文本||居左测试文本1|居中测试文本2|居右测试文本3||居左测试文本11|居中测试文本22|居右测试文本33||居左测试文本111|居中测试文本222|居右测试文本333| #分隔线在一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。 换行在行尾添加两个空格加回车表示换行：这是一行后面加两个空格 换行 注解使用[^]来定义脚注：这是一个脚注的例子^1 下划线","categories":[],"tags":[]}],"categories":[],"tags":[]}